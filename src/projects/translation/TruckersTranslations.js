const translations = {
  es: {
    // ... textos anteriores
    // NUEVOS TEXTOS PARA PROJECTDETAIL
    back: "Volver",
    role: "Rol:",
    techStack: "Tecnologías:",
    projectOverview: "Descripción general del proyecto",
    projectTruckersDescription: "Truckers Talent es una plataforma web orientada a conectar empresas del rubro transporte con candidatos calificados. El objetivo principal fue facilitar la gestión de postulaciones laborales, permitiendo a las empresas registrar sus vacantes y a los usuarios crear perfiles detallados con sus experiencias y habilidades.",
    frontendTitle: "Frontend (React.js + Material UI)",
    frontendPoint1: "Se desarrollaron interfaces responsivas y accesibles utilizando React.js junto a Material UI, asegurando compatibilidad con múltiples dispositivos y una experiencia fluida para el usuario.",
    frontendPoint2: "Se implementaron formularios multi-paso para el registro tanto de empresas como de candidatos. Estos formularios incluyen validaciones dinámicas, navegación paso a paso y feedback inmediato sobre los campos ingresados.",
    frontendPoint3: "Se utilizaron componentes reutilizables y estructura modular, facilitando el mantenimiento y escalabilidad del código.",
    backendTitle: "Backend (Node.js + Express)",
    backendPoint1: "Se diseñaron e integraron múltiples endpoints utilizando Express, organizando la lógica bajo el principio de arquitectura limpia con separación clara entre controladores, rutas y servicios.",
    backendPoint2: "Se implementó un sistema de autenticación segura mediante JSON Web Tokens (JWT), permitiendo el acceso protegido a ciertas rutas y funcionalidades dentro del sistema.",
    backendPoint3: "El backend incluye middleware personalizado para validaciones, control de acceso y manejo centralizado de errores.",
    backendPoint4: "Se desarrolló un sistema de verificación de usuarios vía email durante el proceso de registro, asegurando mayor confianza y autenticidad.",
    databaseTitle: "Base de Datos (PostgreSQL)",
    databasePoint1: "Se estructuró y normalizó la base de datos relacional utilizando PostgreSQL, garantizando integridad de datos y rendimiento óptimo.",
    databasePoint2: "Se diseñaron relaciones entre tablas como usuarios, empresas, postulaciones y habilidades, incluyendo restricciones y claves foráneas.",
    databasePoint3: "Se aplicó una separación clara entre las consultas SQL y la lógica de negocio, manteniendo la organización y la seguridad del sistema.",
    securityPracticesTitle: "Prácticas de seguridad",
    securityPoint1: "Se incorporó protección CORS para evitar accesos no autorizados entre dominios.",
    securityPoint2: "Las contraseñas fueron encriptadas con bcrypt antes de almacenarse.",
    securityPoint3: "Se implementó un manejador de errores centralizado para capturar y registrar errores de forma segura.",
    internshipCertificateTitle: "Certificado de Pasantía",
    internshipCertificateDescription: "Este es el certificado otorgado por mi participación en el proyecto Truckers Talent:",
  },
  en: {
    // ... previous texts
    // NEW TEXTS FOR PROJECTDETAIL
    back: "Back",
    role: "Role:",
    techStack: "Technologies:",
    projectOverview: "Project Overview",
    projectTruckersDescription: "Truckers Talent is a web platform designed to connect transportation companies with qualified candidates. The main objective was to facilitate the management of job applications, allowing companies to register their vacancies and users to create detailed profiles with their experience and skills.",
    frontendTitle: "Frontend (React.js + Material UI)",
    frontendPoint1: "Responsive and accessible interfaces were developed using React.js with Material UI, ensuring compatibility with multiple devices and a smooth user experience.",
    frontendPoint2: "Multi-step forms were implemented for both company and candidate registration. These forms include dynamic validations, step-by-step navigation, and immediate feedback on entered fields.",
    frontendPoint3: "Reusable components and a modular structure were used, facilitating code maintenance and scalability.",
    backendTitle: "Backend (Node.js + Express)",
    backendPoint1: "Multiple endpoints were designed and integrated using Express, organizing the logic under the principle of clean architecture with a clear separation between controllers, routes, and services.",
    backendPoint2: "A secure authentication system was implemented using JSON Web Tokens (JWT), allowing protected access to certain routes and functionalities within the system.",
    backendPoint3: "The backend includes custom middleware for validations, access control, and centralized error handling.",
    backendPoint4: "A user verification system via email was developed during the registration process, ensuring greater trust and authenticity.",
    databaseTitle: "Database (PostgreSQL)",
    databasePoint1: "The relational database was structured and normalized using PostgreSQL, ensuring data integrity and optimal performance.",
    databasePoint2: "Relationships were designed between tables such as users, companies, applications, and skills, including constraints and foreign keys.",
    databasePoint3: "A clear separation was applied between SQL queries and business logic, maintaining the system's organization and security.",
    securityPracticesTitle: "Security Practices",
    securityPoint1: "CORS protection was incorporated to prevent unauthorized access between domains.",
    securityPoint2: "Passwords were encrypted with bcrypt before being stored.",
    securityPoint3: "A centralized error handler was implemented to securely capture and log errors.",
    internshipCertificateTitle: "Internship Certificate",
    internshipCertificateDescription: "This is the certificate granted for my participation in the Truckers Talent project:",
  },
};

export default translations;